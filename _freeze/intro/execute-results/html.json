{
  "hash": "b23aad4e30f0535395224760fbc562d4",
  "result": {
    "markdown": "# Introduction\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n:::\n\n\n## Regular Expressions\n\nRegular expressions are a language for specifying search within strings of text.\n\n-   \"`.`\": matches *any* character.\n\n-   \"`\\`\" (or escape): escapes the special behaviour of expressions like \"`.`\". For example, \"`\\.`\" will match \".\" instead of any character.\n\n-   **Anchors** are used to match the start or end of a string.\n\n    -   \"`^`\": matches the start of the string.\n\n    -   \"`$`\": matches the end of the string.\n\n-   \"`\\d`\": matches any digit.\n\n-   \"`\\s`\": matches any white space (e.g. space, tab, newline)\n\n-   \"`[abc]`\": matches a, b, or c. For example, \"`[Cc]olor`\" matches either \"color\" or \"Color\".\n\n    In cases where there's a well-defined sequence associated with a set of characters, these brackets can be mixed the \"`-`\" (dash) symbol to specify a *range* of characters; for example, \"`[abcdefghijk]`\" is equivalent to \"`[a-k]`\".\n\n-   \"`[^abc]`\": matches anything *except* a, b, or c.\n\n-   \"`|`\" (or disjunction operator): pick between one or more alternate patterns. To make the disjunction operator apply only to a specific pattern, we need to use the parenthesis operators \"`()`\". For example, \"`pupp(y|ies)`\" matches either \"puppy\" or \"puppies\" (the disjunction only applies to the suffixes).\n\n-   **Repetition**:\n\n    -   \"`*`\" (or Kleene star): matches zero or more instances of the previous pattern.\n\n    -   \"`+`\": matches one or more instance.\n\n    -   \"`?`\": matches zero or one instance.\n\n        A range of numbers can also be specified:\n\n    -   `{n}` $n$ occurrences of the previous expression\n\n    -   `{n,m}` from $n$ to $m$ occurrences of the previous expression\n\n    -   `{n,}` at least $n$ occurrences of the previous expression\n\n    -   `{,m}` up to $m$ occurrences of the previous expression\n\nExplore regular expressions using online tools like [regex testers](https://pythex.org/) or [regex puzzles](https://regexcrossword.com/).\n\nThis language will facilitate many real-world tasks, such as:\n\n-   To determine which strings match a pattern\n\n-   To find the positions of matches.\n\n-   To extract the content of matches.\n\n-   To replace matches with new values.\n\n-   To split a string based on a match.\n\n-   Etc.\n\nWhen writing useful regular expressions, we will most likely be trying to minimize type I (false positive) and type II (false negative) errors. Keep in mind that there's a trade-off between accuracy (or precision) and coverage (or recall).\n\n**Regular Expression Substitution, Capture Groups,**\n\nAn important use of regular expressions is in *substitutions.* For example, can use `str_replace_all()` from `stringr` or `gsub()` from base R to put angle brackets around all integers in a string:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstring <- \"the 35 boxes were opened 12 times\"\nstr_replace_all(string, pattern = \"(\\\\d+)\", replacement = \"<\\\\1>\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"the <35> boxes were opened <12> times\"\n```\n:::\n\n```{.r .cell-code}\ngsub(pattern = \"(\\\\d+)\", replacement = \"<\\\\1>\", string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"the <35> boxes were opened <12> times\"\n```\n:::\n:::\n\n\nHere the \"`\\1`\" will be replaced by whatever string matched the first item in parentheses.\n\nThis use of parentheses to store a pattern in memory is called a **capture group.** Every time a capture group is used (i.e., parentheses surround a pattern), the resulting match is stored in a numbered **register.** If you match two different sets of parentheses, \"`\\2`\" means whatever matched the second capture group. Parentheses thus have a double function in regular expressions; they are used to group terms for specifying the order in which operators should apply, and they are used to capture something in a register.\n\n**look forwards and backwards**\n\n(?=)\n\nfile:///Users/acastroaraujo/Documents/Notes/Other/Text.html#regular_expressions\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}